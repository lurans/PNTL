#logger
net.spy.log.LoggerImpl=com.huawei.cache.log.WccLogger

#connectorfactory config
## op.timeout milliseconds
net.spy.operation.timeout=2500
## failure.mode Redistribute, Retry, Cancel
net.spy.failure.mode=Redistribute
## hash algorithm: KETAMA_HASH, FNV1A_32_HASH, FNV1_32_HASH, FNV1A_64_HASH, FNV1_64_HASH, CRC_HASH, NATIVE_HASH
net.spy.hash.algorithm=KETAMA_HASH
## Maximum length of the operation queue returned by this connection factory.
net.spy.op.queue.max.length=16384
## The maximum time to block waiting for op queue operations to complete, in seconds.
net.spy.op.queue.max.block.time=10
## Maximum amount of time (in seconds) to wait between reconnect attempts
net.spy.max.reconnect.delay=10

#local cache start

#default max size of cache 10MB
app.cache.local.maxcachesize=10485760

#default max life of time 30min
app.cache.local.maxlifetime=600000

#default capacity
app.cache.local.capacity=256

#local cache end

#passthrough start
#region name
app.pt.region.name=region

#up.packet.size (byte)
app.pt.http.up.packet.size=10485760

#down.packet.size (byte)
app.pt.http.down.packet.size=1048576

#enable region
app.pt.silvan.serverbyregion.enabled=false

#region refresh Interval(10 * 60 * 60 * 1000 ms)
app.pt.silvan.serverbyregion.interval.millis=36000000

#slivan url
app.pt.silvan.serverbyregion.uri=https://ip:port/silvan/rest/v1.0/endpoints/all/regions

#passthrough end

#iam token renew time rate of token-validity.
auth.token.renewtime.reserved.rate=0.5

#timeunit(second) notify iam exist user is in operating.
auth.notify.user.operate.time.interval=300
auth.notify.user.thread.pool.size=1

#api-metedata-plugin start
#set MQ throttle topic name
app.clientsdk.producer.throttle.topic=throttle

#set MQ access log topic name
app.clientsdk.producer.accesslog.topic=accesslog

#set MQ consumer banlist topic name
app.clientsdk.consumer.throttle.topic=banlist

#api-metedata-plugin end

#kafka client start
# allows the background consumer threads to consume data from their streams 10 seconds
app.clientsdk.consumer.shutdown.delay=10000

app.clientsdk.consumer.thread.default=1

#kafka client end
